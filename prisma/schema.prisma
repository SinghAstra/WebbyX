generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accounts      Account[]
  videos        Video[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Video {
  id               String               @id @default(cuid())
  youtubeId        String
  title            String
  channelName      String
  videoThumbnail   String
  channelThumbnail String
  duration         String
  userId           String
  processingState  VideoProcessingState @default(PENDING)
  transcript       String[]
  createdAt        DateTime             @default(now())
  tweetThread      TweetThread?
  user             User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model TweetThread {
  id          String       @id @default(cuid())
  videoId   String   @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  video       Video        @relation(fields: [videoId], references: [id])
  tweets      Tweet[]      
}


model Tweet {
  id          String @id @default(cuid())
  threadId     String
  content     String
  index       Int 

  createdAt   DateTime @default(now())
  thread      TweetThread  @relation(fields: [threadId], references: [id])
}



enum VideoProcessingState {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}